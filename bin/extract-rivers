#!/bin/bash

# ---------------------------------------------------------------
#      This script extracts river profiles using 
#      RichDEM and GRASS GIS tools 
#      for use with the 2d river inversion model
#
#      Carla Pont - 17/June/2019
# ---------------------------------------------------------------


##### Functions

usage() {
   echo ""
   echo "An automated method to extract rivers using GRASS GIS"
   echo "" 
   echo "Usage: $0 [OPTIONS] -d <grassdir> -f <dem> -p <projection> -s <shapefile> -t <threshold>"
   echo ""
   echo "ARGUMENTS"
   echo "	-p | --project		GRASS PROJECT name"
   echo "	-d | --dem		Projected DEM to upload"
   echo "	-s | --shapefile	Shapefile to mask DEM"
   echo "	-t | --threshold	minimum catchment size (pixels)"
   echo "OPTIONS"
   echo "        -n | --number           Number of rivers to extract. Default: All"
   echo "	-o | --overwrite	Overwrite existing files"
   echo "	-h | --help		help"
   echo ""  
   exit 1
}


##### Read input parameters from command line

args=$*

while [ "$1" != "" ]; do
   case $1 in
      -p | --project )
         shift
         GRASSDIR=$1
         ;;
      -d | --dem )
         shift
         GRID=$1
         ;;
      -s | --shapefile )
         shift
         COAST=$1
         ;;
      -t | --threshold )
         shift
         THRESHOLD=$1
         ;;
      -n | --number )
         shift
         NO_RIVERS=$1
         ;;
	   -o | --overwrite )
	  	   shift
		   command_args='--overwrite'
		   ;;
      -h | --help )
         usage
         exit
         ;;
      * )
         echo "Error: $1 not recognised"
         usage
         exit 1
   esac
   shift
done

#### Setting output filename for DEM

filename=${GRID##*/} 
DEM=${filename%.*}_fill.tif

### Check if all command line arguments are present

if [[ -z $GRASSDIR || -z $GRID || -z $COAST || -z $THRESHOLD ]]; then
	echo "Error: required arguments not set"
	usage
	exit 1
fi


##################################
#                                #
#   MAIN()                       #
#                                #
##################################

# Checks if you are in GRASS GIS environment, 
# else starts the environment to run the script

#[POSSIBLE TO INCLUDE OPTION TO USE TMP LOCATION?]

if [[ -z $GISBASE ]]; then
   echo ""
   echo "--------------------------------------------------------------"
   echo ""
   echo "Filling ${GRID} using RichDEM"   
   rd_depression_filling ${GRID} ${DEM}            # Filling DEM using RICHDEM
   echo ""
   echo "--------------------------------------------------------------"
	echo "Creating new GRASS PROJECT at ${GRASSDIR}"
   echo "--------------------------------------------------------------"
   echo ""
	grass76 -e -c ${DEM} ${GRASSDIR}                   # Creating GRASS DIRECTORY
   echo ""
   echo "--------------------------------------------------------------"
	echo "Starting GRASS GIS with ${0} ${args}"
   echo "--------------------------------------------------------------"
   echo ""
	grass76 --text ${GRASSDIR}/PERMANENT --exec ${0} ${args} # Running script to \                                                           # extract rivers
	exit
fi



##################################
#                                #
#   EXTRACTING RIVERS            #
#   IN GRASS GIS                 #
#                                #
##################################


#Loading projected and filled DEM into GRASS

echo "--------------------------------------------------------"
echo "Loading ${DEM} into GRASS                               "
echo "- -------------------------------------------------------"
r.in.gdal input=$DEM output=dem $command_args

#Set region to DEM

echo ""
echo "----------------------------"
echo "Computational region set to:"
echo "----------------------------"
g.region raster=dem -p

#Mask DEM using a high resolution coastline data
r.mask -r
v.import input=$COAST output=coast extent=region $command_args
r.mask vector=coast
echo ""
echo "-----------------------"
echo "DEM masked to coastline"
echo "-----------------------"
echo ""

#Calculate flow accumulation using a SFD. 
echo "----------------------------------------------------------"
echo "Extracting flow accumulation using a single flow direction"
echo "----------------------------------------------------------"
echo ""
r.watershed -s -m ele=dem acc=facc memory=10000 $command_args

#Calculate stream network
echo ""
echo "------------------------------------------------------------"
echo "Extracting stream network using THRESHOLD: $THRESHOLD pixels"
echo "------------------------------------------------------------"
echo ""

r.stream.extract elevation=dem accumulation=facc threshold=$THRESHOLD stream_rast=stream_$THRESHOLD stream_vector=stream_$THRESHOLD direction=fdir memory=10000 $command_args

#Linking river segments to their downstream portion using 
#its unique cat number

v.db.addcolumn stream_300 columns="x1 double,x2 double,y1 double,y2 double,tostream int"
v.to.db map=stream_300 option=start columns=x1,y1
v.to.db map=stream_300 option=end columns=x2,y2

#Indexing sqllite database

db.execute sql="create index stream_300_i1 on stream_300(x2,y2)"
db.execute sql="create index stream_300_i2 on stream_300(x1,y1)"

#Finding cat numbers to linking stream segments

db.execute sql="update stream_300 set tostream=(select s2.cat from stream_300 s2 where stream_300.x2=s2.x1 and stream_300.y2=s2.y1 and stream_300.cat<>s2.cat)"

#Looping through channel heads to extract rivers

eval `g.region -g`
SQ_M=$( echo "${ewres}*${nsres}" | bc -l )
res=$( echo "${nsres}" )
echo ""
echo ""
echo "Using resolution: $res and cell area: $SQ_M m^2"

#Checking number of rivers doesn't exceed number of start_node records

max_rivnum=`db.select -c sql='select COUNT(*) from stream_300 where stream_type="start"'`

if [ -z "$NO_RIVERS" ]; then
   lim="${max_rivnum}"
else
   lim="${NO_RIVERS}"
fi

#Loop to extract river profiles. 
#Output ascii file contains six columns: 
#X, Y, cat, elev, dist, drainage area (m**2)

i=0
time for start_node in `db.select -c sql='select cat from stream_300 where stream_type="start" order by random() limit '${lim}''`; do
   i=$(( ${i} + 1 ))
	echo "$start_node"
   #Extract linking stream segments
   v.extract -d input=stream_300 output=line_${start_node} where="cat in (with recursive cats(cat) as (values(${start_node}) union all select tostream from stream_300 s, cats where s.cat=cats.cat) select cat from cats where cat is not null)" new=0 $command_args
   #Convert to polyline (to remove duplicate vertices)
   v.build.polylines input=line_${start_node} output=cpath_${start_node} $command_args
   #Extract X, Y coordinates and distance along channel
   v.to.points input=cpath_${start_node} output=pnt_${start_node} use=vertex layer=-1 $command_args
   #Remove superfluous points for v.build.polylines
   v.extract input=pnt_${start_node} where="along > 0" output=cpathpnt_${start_node} layer=2 $command_args
   #Extract elevation at each point
   v.what.rast cpathpnt_${start_node} raster=dem column="elevation_m" layer=2 $command_args
   #Extract flow accumulation at each point
   v.what.rast cpathpnt_${start_node} raster=facc column=accum_pixels layer=2 $command_args
   v.db.addcolumn cpathpnt_${start_node} columns="drainage_area_m2 double" layer=2 $command_args
   #Convert flow accumulation pixels to m^2
   v.db.update cpathpnt_${start_node} column=drainage_area_m2 query_col="accum_pixels*${SQ_M}" layer=2 $command_args
   #Drop column with flow accumulation pixels
   v.db.dropcolumn cpathpnt_${start_node} columns="accum_pixels" layer=2 $command_args
   v.db.renamecolumn cpathpnt_${start_node} column="along,distance_m" layer=2 $command_args
   #Output each stream channel in a separate ascii file
   v.out.ascii -c input=cpathpnt_${start_node} layer=2 columns="elevation_m,distance_m,drainage_area_m2" separator=',' output=riv${start_node}.dat $command_args
   echo ""
   echo "----------------------------"
   echo " River $i of ${lim} created "
   echo "----------------------------"
   echo ""
done

echo "River Extraction Complete!"